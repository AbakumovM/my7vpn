import asyncio
import logging
import os
from datetime import datetime
from io import StringIO

from aiogram import Bot
from aiogram.types import BufferedInputFile

from database.db_service import scheduled_payments
from lexicon.text_manager import bot_repl

ADMIN_ID = os.getenv("ADMIN_ID")
logger = logging.getLogger(__name__)


async def check_pending_subscriptions(bot):
    # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
    pending = await scheduled_payments()  # —Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å –∫ –ë–î

    if pending:

        await asyncio.gather(
            *(send_message_end_payments(item, bot) for item in pending),
            return_exceptions=True,
        )

        report = f"üîî –û—Ç—á—ë—Ç –Ω–∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        report += f"üì¨ –ù–∞–π–¥–µ–Ω–æ {len(pending)} –ø–æ–¥–ø–∏—Å–æ–∫, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏—Ö—Å—è —Å–µ–≥–æ–¥–Ω—è:\n\n"

        for idx, p in enumerate(pending, 1):
            report += (
                f"{idx}. {p.device_name} (ID: {p.telegram_id})\n"
                f"üìå –ü–ª–∞–Ω: {p.plan}\n"
                f"üìÖ –ù–∞—á–∞–ª–æ: {p.start_date.strftime('%d.%m.%Y')}\n"
                f"üîö –û–∫–æ–Ω—á–∞–Ω–∏–µ: {p.end_date.strftime('%d.%m.%Y')}\n"
                f"---\n"
            )
    else:
        report = f"üîî –û—Ç—á—ë—Ç –Ω–∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}\n‚úÖ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫, —Ç—Ä–µ–±—É—é—â–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."

    try:
        await send_long_message(bot, ADMIN_ID, report)
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É {ADMIN_ID}: {e}")


async def send_long_message(bot: Bot, chat_id: int, text: str, max_len: int = 4000):
    if len(text) <= max_len:
        await bot.send_message(chat_id=chat_id, text=text)
    else:
        buffer = StringIO()
        buffer.write(text)
        buffer.seek(0)
        input_file = BufferedInputFile(
            buffer.getvalue().encode("utf-8"), filename="report.txt"
        )
        await bot.send_document(chat_id=chat_id, document=input_file)


async def send_message_end_payments(item: list, bot: Bot):
    try:
        await bot.send_message(
            chat_id=item.telegram_id,
            text=bot_repl.send_messages_end_pay(item.device_name),
        )
    except Exception as e:
        logger.error(
            f'f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {item.telegram_id}: {e}'
        )
