import asyncio
import logging
import os

from aiogram import BaseMiddleware, Bot, Dispatcher, types
from aiogram.client.default import DefaultBotProperties
from aiogram.enums.parse_mode import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

from keyboards.commands import set_commands
from handlers import router
from utils.scheduler import setup_scheduler
from config.config_app import app_config

logger = logging.getLogger(__name__)


class ResetStateMiddleware(BaseMiddleware):
    async def __call__(self, handler, event: types.Message, data: dict):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–±—ã—Ç–∏–µ –∫–æ–º–∞–Ω–¥–æ–π (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "/")
        if event.text and event.text.startswith("/"):
            # –ü–æ–ª—É—á–∞–µ–º FSMContext –∏–∑ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö (data["state"])
            state: FSMContext = data.get("state")
            if state is not None:
                current_state = await state.get_state()  # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
                if current_state is not None:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ middleware –∏–ª–∏ handler
        return await handler(event, data)


async def main():
    logging.basicConfig(
        level=logging.INFO,
        format="[%(asctime)s] - %(levelname)s - %(name)s - %(message)s",
    )
    logger.info("Starting bot")
    bot = Bot(
        token=app_config.bot.token,
        default=DefaultBotProperties(
            parse_mode=ParseMode.HTML,
        ),
    )
    dp = Dispatcher(
        storage=MemoryStorage()
    )  # –≥–æ–≤–æ—Ä–∏—Ç –æ —Ç–æ–º, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î (–∫ –ø—Ä–∏–º–µ—Ä—É —Å–æ—Å—Ç–æ—è–Ω–∏—è), –±—É–¥—É—Ç —Å—Ç—ë—Ä—Ç—ã –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ

    dp.include_routers(router)

    dp.message.middleware(ResetStateMiddleware())

    await bot.delete_webhook(
        drop_pending_updates=True
    )  # —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
    dp.startup.register(set_commands)
    # await set_commands(bot)
    scheduler = setup_scheduler(bot)
    # scheduler.start()
    # job = scheduler.get_job("check_subscriptions")
    # if job and job.next_run_time:
    #     next_run = job.next_run_time
    #     logger.info("üöÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")
    #     logger.info(
    #         f"üìå –°–ª–µ–¥—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {next_run.strftime('%d.%m.%Y %H:%M:%S %Z')}"
    #     )
    # else:
    #     print("‚ö†Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (–≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ?)")
    await dp.start_polling(
        bot, allowed_updates=dp.resolve_used_update_types()
    )  # –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Long Polling


if __name__ == "__main__":
    asyncio.run(main())
